
PIR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddb  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a0  00000000  00000000  00001117  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000620  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c7  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002b57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  7a:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
 */ 
#include "LCD.h"

void LCD_command(unsigned char cmnd)
{
	LCD_DATA_PORT = cmnd; // Send the command to the data port
  82:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT &= ~(1 << RS_PIN); // RS = 0 for command
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1 << RW_PIN); // RW = 0 for write
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT |= (1 << E_PIN); // Enable high
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	84 60       	ori	r24, 0x04	; 4
  94:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_command+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_command+0x1e>
  a0:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT &= ~(1 << E_PIN); // Enable low
  a2:	8b b3       	in	r24, 0x1b	; 27
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_command+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_command+0x30>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <LCD_data>:
	_delay_ms(1);
}

void LCD_data(unsigned char data)
{
	LCD_DATA_PORT = data; // Send the data to the data port
  b6:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL_PORT |= (1 << RS_PIN); // RS = 1 for data
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT &= ~(1 << RW_PIN); // RW = 0 for write
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL_PORT |= (1 << E_PIN); // Enable high
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_data+0x18>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_data+0x1e>
  d4:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT &= ~(1 << E_PIN); // Enable low
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_data+0x2a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_data+0x30>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_init>:
}

void LCD_init()
{
	// Set data and control ports as outputs
	DDRC = 0xFF; // Data port
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
	DDRA |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN); // Control port
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	8a bb       	out	0x1a, r24	; 26
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	93 e1       	ldi	r25, 0x13	; 19
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_init+0xe>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_init+0x14>
  fe:	00 00       	nop
	_delay_ms(20); // LCD Power ON delay
	LCD_command(0x38); // 2 lines, 5x7 matrix
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x0E); // Display on, cursor on
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x01); // Clear display
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 112:	83 ef       	ldi	r24, 0xF3	; 243
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_init+0x2c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_init+0x32>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_display_string>:
	_delay_ms(2);
}

void LCD_display_string(const char *str)
{
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	8c 01       	movw	r16, r24
	for (int i = 0; str[i] != '\0'; i++)
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
 12e:	09 c0       	rjmp	.+18     	; 0x142 <LCD_display_string+0x22>
	{
		LCD_data(str[i]);//A--> N--> A--> S--> \0 BREAK
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_data>
 134:	87 ea       	ldi	r24, 0xA7	; 167
 136:	91 e6       	ldi	r25, 0x61	; 97
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_display_string+0x18>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_display_string+0x1e>
 13e:	00 00       	nop
	_delay_ms(2);
}

void LCD_display_string(const char *str)
{
	for (int i = 0; str[i] != '\0'; i++)
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f1 cf       	rjmp	.-30     	; 0x130 <LCD_display_string+0x10>
	{
		LCD_data(str[i]);//A--> N--> A--> S--> \0 BREAK
		_delay_ms(100);
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <main>:
#define PIR_PIN PD0   // PIR sensor connected to PD0

int main(void)
{
    // Configure PIR pin as input
    DDRD &= ~(1 << PIR_PIN);  // PD0 input
 158:	81 b3       	in	r24, 0x11	; 17
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	81 bb       	out	0x11, r24	; 17
    PORTD |= (1 << PIR_PIN);  // Enable pull-up (optional)
 15e:	82 b3       	in	r24, 0x12	; 18
 160:	81 60       	ori	r24, 0x01	; 1
 162:	82 bb       	out	0x12, r24	; 18

    // Initialize LCD
    LCD_init();
 164:	0e 94 75 00 	call	0xea	; 0xea <LCD_init>

    while (1)
    {
        if (PIND & (1 << PIR_PIN))  // PIR HIGH = motion detected
 168:	80 9b       	sbis	0x10, 0	; 16
 16a:	0e c0       	rjmp	.+28     	; 0x188 <main+0x30>
        {
            LCD_command(0x01);  // Clear LCD
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 172:	83 ec       	ldi	r24, 0xC3	; 195
 174:	99 e0       	ldi	r25, 0x09	; 9
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x1e>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x24>
 17c:	00 00       	nop
			_delay_ms(10);
            LCD_display_string(" Motion Detected ");
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 90 00 	call	0x120	; 0x120 <LCD_display_string>
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <main+0x4a>
        }
        else  // PIR LOW = no motion
        {
            LCD_command(0x01);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 18e:	83 ec       	ldi	r24, 0xC3	; 195
 190:	99 e0       	ldi	r25, 0x09	; 9
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x3a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x40>
 198:	00 00       	nop
			_delay_ms(10);
            LCD_display_string(" Not Detected ");
 19a:	82 e7       	ldi	r24, 0x72	; 114
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 90 00 	call	0x120	; 0x120 <LCD_display_string>
 1a2:	9f e9       	ldi	r25, 0x9F	; 159
 1a4:	26 e8       	ldi	r18, 0x86	; 134
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	91 50       	subi	r25, 0x01	; 1
 1aa:	20 40       	sbci	r18, 0x00	; 0
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x50>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x5a>
 1b2:	00 00       	nop
 1b4:	d9 cf       	rjmp	.-78     	; 0x168 <main+0x10>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
